// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Notes:
    // A-instruction ivvvvvvvvvvvvvvv, where i is the MSB, and i=0
    // C-instruction ixxaccccccdddjjj, where i is the MSB, and i=1
    //               dest;comp;jump
    // LSB of a n-bit binary sequence is at index 0
    // MSB of a n-bit binary sequence is at index n-1

    // Multiplexor for ALU output and instruction
    Mux16(a=instruction, b=aluout, sel=instruction[15], out=aregisterinpin);

    // The A Register must be loaded if the instruction is an A-instruction, or
    // if the instruction is a C-instruction and the d1 bit is 1, meaning the
    // output of the ALU must be stored in the A Register
    
    // Variables
    Nand(a=instruction[15], b=false, out=isainstruction);
    And(a=instruction[15], b=true, out=iscinstruction);
    And(a=iscinstruction, b=instruction[5], out=iscinstructionandd1);
    
    // Check if instruction is A-instruction or 
    // C-instruction that has d1 set to 1
    Or(a=isainstruction, b=iscinstructionandd1, out=storeinaregister);

    // A Register
    // Split out to addressM, which is the Memory address to fetch the Memory value
    // for the next clock cycle. The address is 15-bit
    Register(in=aregisterinpin, load=storeinaregister, out=aregisterout, out[0..14]=addressM);

    // D Register
    Register(in=aluout, load=instruction[4], out=dregisterout);

    // ALU
    ALU(x=, y=, zx=, nx=, zy=, ny=, f=, no=, out=aluout, zr=aluzr, ng=alung);

    // Program Counter
    // Will load what's in A, based on j-bits and ALU's output bits 
    // zr (output is zero) and ng (output is negative).
    // The output bits of the ALU is relevant because some of the jump functions
    // depend on the output value of the ALU.
    // The Program Counter will increment by default, therefore I will
    // hardcode inc=true
    // Example:
    // @8192
    // D+M;JGT
    Jump(j1=instruction[13], j2=instruction[14], j3=instruction[15], zr=aluzr, ng=alung, out=jumpout) 
    PC(in=aregisterout, load=jumpout, inc=true, reset=reset, out=pc);
}