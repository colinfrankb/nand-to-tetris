// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/PC.hdl

/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]
 */

CHIP PC {
    IN in[16],load,inc,reset;
    OUT out[16];

    PARTS:
    //Solution:
    //1. Since the register can only exist once, it means all three
    //   possible inputs (out(t) + 1, 0, out(t)) needs to be instantiated.
    //2. Use a multiplexor, based on the load, reset and inc bits passed
    //   into the multiplexors as parts of the sel variable, to output the
    //   value that will be written to the register.
    
    //Note: With this design the register will always be written to, 
    //      even with it's original value.

    Inc16(in=outputofregister, out=inincremented);

    Mux8Way16(
      a=outputofregister, 
      b=in, 
      c=inincremented, 
      d=in, 
      e=false, 
      f=false, 
      g=false, 
      h=false, 
      sel[0]=load, sel[1]=inc, sel[2]=reset, 
      out=muxout
    );

    Register(in=muxout, load=true, out=outputofregister, out=out);
}
